/* *********************************************************************
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0.
 * 
 * If a copy of the MPL was not distributed with this file, You can obtain
 * one at http://mozilla.org/MPL/2.0/.
 * 
 * This Source Code Form is “Incompatible With Secondary Licenses”, as
 * defined by the Mozilla Public License, v. 2.0.
 * ********************************************************************* */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Web.UI;
using System.Web.UI.WebControls;
using FiftyOne.Foundation.Mobile.Detection;

#if VER4

using System.Linq;

#endif

namespace FiftyOne.Foundation.UI.Web
{
    /// <summary>
    /// User control used to select a specific device.
    /// </summary>
    public class DeviceFinder : BaseUserControl
    {
        #region Fields

        private string _deviceId;

        #endregion

        #region Controls Declaration

        private Panel _pnlTitle;
        private Panel _pnlResult;
        private Table _tblCriteria;
        private DropDownList _ddlVendors;
        private DropDownList _ddlModels;
        private TextBox _txtFreeText;
        private Button _btnFind;
        private GridView _gvResults;
        private Label _lblDevice;

        #endregion

        #region Private Methods

        private void CreateResultsList()
        {
            _gvResults = new GridView();
            _gvResults.AutoGenerateColumns = false;

            var captionColumn = new BoundField();
            captionColumn.HeaderText = "Device";
            captionColumn.DataField = "Caption";
            _gvResults.Columns.Add(captionColumn);

            _gvResults.AutoGenerateSelectButton = true;
            _gvResults.AutoGenerateDeleteButton = false;
            _gvResults.AutoGenerateEditButton = false;
            _gvResults.AllowPaging = true;
            _gvResults.ShowHeader = true;
            _gvResults.ShowFooter = false;
            _gvResults.PageSize = 25;

            _gvResults.PageIndexChanging += new GridViewPageEventHandler(_gvResults_PageIndexChanging);
            _gvResults.RowCommand += new GridViewCommandEventHandler(_gvResults_RowCommand);
        }

        void _gvResults_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            
        }

        void _gvResults_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            if (e.CommandName == "Select")
            {
                int index = 0;
                if (int.TryParse(e.CommandArgument as string, out index))
                    _deviceId = ((List<Device>)_gvResults.DataSource)[index].DeviceID;
            }
        }

        private Table CreateCriteriaTable()
        {
            var table = new Table();
            
            var row = new TableRow();
            CreateCell(_lblDevice, row, 2);
            table.Rows.Add(row);

            row = new TableRow();
            CreateLabelCell(Resources.FinderVendorLabelText, Resources.FinderVendorLabelToolTip, row, 1);
            CreateLabelCell(Resources.FinderModelLabelText, Resources.FinderVendorLabelToolTip, row, 1);
            table.Rows.Add(row);
            
            row = new TableRow();
            CreateCell(_ddlVendors, row, 1);
            CreateCell(_ddlModels, row, 1);
            table.Rows.Add(row);

            row = new TableRow();
            CreateLabelCell("Or", string.Empty, row, 2);
            table.Rows.Add(row);

            row = new TableRow();
            CreateLabelCell(Resources.FinderFreeTextLabelText, Resources.FinderFreeTextLabelToolTip, row, 2);
            table.Rows.Add(row);

            row = new TableRow();
            CreateLabelCell(Resources.FinderFreeTextLabelText, Resources.FinderFreeTextLabelToolTip, row, 2);

            row = new TableRow();
            CreateCell(_txtFreeText, row, 1);
            CreateCell(_btnFind, row, 1);
            table.Rows.Add(row);

            row = new TableRow();
            CreateCell(_gvResults, row, 1);
            table.Rows.Add(row);

            return table;
        }

        private void CreateCell(WebControl withControl, TableRow addToRow, int colSpan)
        {
            var cell = new TableCell();
            cell.ColumnSpan = colSpan;
            cell.Controls.Add(withControl);
            addToRow.Cells.Add(cell);
        }

        private void CreateLabelCell(string text, string toolTip, TableRow addToRow, int colSpan)
        {
            var cell = new TableCell();
            cell.ColumnSpan = colSpan;
            AddLabel(cell, text, toolTip, null, "");
            addToRow.Cells.Add(cell);
        }

        private void CreateVendorsList()
        {
            _ddlVendors = new DropDownList();
            _ddlVendors.AutoPostBack = true;
            _ddlVendors.ID = "DropDownListVendors";
            _ddlVendors.DataSource = DataProvider.Vendors.Keys;
            _ddlVendors.DataTextField = "Name";
            _ddlVendors.DataValueField = "Name";
            _ddlVendors.DataBind();
        }

        /// <summary>
        /// Creates the models data list with all the possible models as the datasource.
        /// </summary>
        private void CreateModelsList()
        {
            _ddlModels = new DropDownList();
            _ddlModels.ID = "DropDownListModels";
            _ddlModels.DataSource = DataProvider.Devices;
            _ddlModels.DataTextField = "HardwareModel";
            _ddlModels.DataValueField = "DeviceID";
            _ddlModels.DataBind();
            _ddlModels.AutoPostBack = true;
        }

        /// <summary>
        /// Binds to a new list and retains the selected value.
        /// </summary>
        private void SetVendor()
        {
            var selectedVendor = GetSelectedVendor();
            if (selectedVendor != null)
            {
                _ddlModels.DataSource = DataProvider.Vendors[selectedVendor];
                _ddlModels.DataBind();
                _ddlModels.SelectedValue = _deviceId;
            }
        }

        #endregion

        #region Events

        /// <summary>
        /// Creates the new controls used by the device finder.
        /// </summary>
        /// <param name="e"></param>
        protected override void OnInit(EventArgs e)
        {
            base.OnInit(e);

            _pnlTitle = new Panel();
            _pnlResult = new Panel();
            _lblDevice = new Label();
            CreateVendorsList();
            CreateModelsList();
            CreateResultsList();
            _txtFreeText = new TextBox();
            _txtFreeText.ID = "TextBoxFreeText";
            _btnFind = new Button();
            _btnFind.ID = "ButtonFind";
            _btnFind.Text = "Find";
            _btnFind.Click += Find_Click;
            _tblCriteria = CreateCriteriaTable();

            _container.Controls.Add(_pnlTitle);
            _container.Controls.Add(_tblCriteria);
            _container.Controls.Add(_pnlResult);

            Page.RegisterRequiresControlState(this);
        }

        /// <summary>
        /// Saves the currently selected device id.
        /// </summary>
        /// <returns></returns>
        protected override object SaveControlState()
        {
            return _deviceId;
        }

        /// <summary>
        /// Loads the currently selected device id.
        /// </summary>
        /// <param name="savedState"></param>
        protected override void LoadControlState(object savedState)
        {
            _deviceId = (string)savedState;            
        }

        /// <summary>
        /// Sets the correct models list for the vendor.
        /// </summary>
        /// <param name="e"></param>
        protected override void OnLoad(EventArgs e)
        {
            SetVendor();

            _gvResults.Visible = !String.IsNullOrEmpty(_txtFreeText.Text);

            if (_gvResults.Visible)
            {
                _gvResults.DataSource = DataProvider.FindDevices(_txtFreeText.Text);
                _gvResults.DataBind();
            }

            base.OnLoad(e);
        }

        /// <summary>
        /// Renders the current device caption.
        /// </summary>
        /// <param name="e"></param>
        protected override void OnPreRender(EventArgs e)
        {
            if (String.IsNullOrEmpty(_deviceId) == false)
            {
                var device = DataProvider.GetDeviceFromDeviceID(_deviceId);
                _lblDevice.Text = device.Caption;
            }
            else
            {
                _lblDevice.Parent.Parent.Visible = false;
            }
            base.OnPreRender(e);
        }
   
        private void Find_Click(object sender, EventArgs e)
        {
            // TODO
        }

        /// <summary>
        /// Returns the currently selected vendor if any.
        /// </summary>
        /// <returns></returns>
        private Value GetSelectedVendor()
        {
            foreach (var vendor in DataProvider.Vendors.Keys)
                if (vendor.Name == _ddlVendors.SelectedValue)
                    return vendor;
            return null;
        }

        #endregion
    }
}
